## FeatureFlow: Dynamic Feature Management Architecture

This document outlines the architecture of the FeatureFlow component, a framework designed to manage dynamic feature modules within an Android application. It facilitates the loading, installation, and display of features on demand, leveraging Google Play Core's SplitInstall API.

### High-Level Overview

FeatureFlow is structured into several key layers: UI, Domain, State Management, Registration, and Dependency Injection. These layers work in concert to provide a robust and maintainable solution for dynamic feature delivery. The primary goal is to allow different parts of the application to be downloaded and installed only when needed, reducing initial app size and improving resource utilization.

The typical flow involves:
1.  A request (often via a URI) to load a specific feature.
2.  The URI is resolved to determine the feature name and any associated parameters.
3.  The framework checks if the feature is already installed.
4.  If not installed, it initiates the download and installation process, providing feedback to the user (e.g., progress, confirmation requests for large downloads).
5.  Interceptors can be configured to run pre- and post-installation tasks.
6.  Once installed, the feature's UI (typically a Composable screen) is loaded and displayed.
7.  State changes (loading, error, success, confirmation) are managed and communicated to the UI throughout this process.

### Key Architectural Components

#### 1. UI Layer

The UI layer is responsible for presenting information to the user and capturing user interactions. It consists of an `Activity`, `ViewModel`, and Composable `Screen` components.

* **`DFComponentActivity`**: This is the entry point Activity for hosting dynamic features. It handles incoming intents (e.g., deep links via `ACTION_VIEW` or custom intents) to trigger feature loading. It observes the `DFComponentViewModel` for UI state changes and one-time events like showing Play Core's user confirmation dialog for feature installation. The activity is also responsible for launching the confirmation dialog using an `ActivityResultLauncher` and communicating the result back to the ViewModel. It uses Jetpack Compose for rendering its UI and will display either the `DFComponentScreen` (for loading/error states) or the dynamically loaded feature's Composable content. `DisposableEffect` is used to clear the dynamic content from the ViewModel when the feature's UI is no longer visible.
* **`DFComponentViewModel`**: This ViewModel orchestrates the logic for loading and displaying dynamic features. It manages the UI state (`DFComponentState`), handles user intents (`DFComponentIntent` such as `LoadFeature`, `Retry`, `UserConfirmationResult`, `ProcessUri`), and interacts with various domain use cases. It uses `StateFlow` to expose the UI state and a dynamic Composable screen lambda to the `DFComponentActivity`. It also uses a `SharedFlow` to emit one-time events like triggering a user confirmation dialog. The ViewModel keeps track of the current feature being processed, its parameters, and any active installation jobs. It handles duplicate URI processing and cancellation of previous feature loading jobs if a new one is initiated for a different feature.
* **`DFComponentScreen`**: A Composable function that renders the UI based on the `DFComponentState` from the `DFComponentViewModel`. It displays loading indicators, error messages with retry options, and prompts for user confirmation. This screen acts as a placeholder until the actual dynamic feature's UI is loaded and ready.
* **UI State (`DFComponentState`)**: A sealed class representing different UI states like `Loading`, `Error`, `RequiresConfirmation`, and `Success`.
* **User Intents (`DFComponentIntent`)**: A sealed class representing user actions that the ViewModel needs to process, such as `LoadFeature`, `Retry`, `UserConfirmationResult`, and `ProcessUri`.
* **Theme (`FeatureFlowTheme`, `Color`, `Type`)**: Standard Jetpack Compose theming files defining the color palette, typography, and overall theme for the FeatureFlow components.

#### 2. Domain Layer

The domain layer encapsulates the core business logic of the FeatureFlow component. It consists of various use cases that orchestrate the different steps involved in feature loading and installation.

* **Use Cases**:
    * **`DFResolveFeatureRouteUseCase`**: Parses a URI string to extract the feature name, navigation key, and parameters, determining if it's a feature route or a navigation route. It returns a `DFProcessUriState` which can be `FeatureRoute`, `NavigationRoute`, or `InvalidUri`.
    * **`DFLoadFeatureUseCase`**: Determines the initial state of a requested feature. It checks if the feature is registered, if pre-install interceptors pass, and if the feature is already installed. It returns `DFLoadFeatureResult` which can be `ProceedToPostInstall` (if already installed and interceptors pass), `ProceedToInstallationMonitoring` (if not installed and interceptors pass), or `Failure`.
    * **`DFInstallFeatureUseCase` (implements `DFFeatureInstaller`)**: Manages the actual installation of a dynamic feature module using the `SplitInstallManager`. It initiates download requests, monitors installation progress via `SplitInstallStateUpdatedListener`, handles various installation states (Pending, Downloading, Installing, Installed, Failed, etc.), and updates the `DFStateStore` accordingly. It also handles user confirmation requests for large downloads.
    * **`DFTrackFeatureInstallUseCase`**: This use case is responsible for monitoring the Play Core installation progress and events. It collects events from the installation flow and emits `DFInstallationMonitoringState` updates to the ViewModel. It also contains logic for error handling during installation (`handleError`).
    * **`DFHandleFeatureInterceptorsUseCase`**: Executes registered pre-install or post-install interceptors for a feature. It iterates through the relevant `DFFeatureInterceptor` tasks and updates their state in the `DFStateStore`.
    * **`DFCompleteFeatureSetupUseCase`**: Performs post-installation steps for a feature. This includes initializing components via `ServiceLoader`, running post-install interceptors, and fetching the dynamic screen Composable. It returns a `DFFeatureSetupResult` which is either `Success` (with the Composable screen) or `Failure`.
    * **`DFFeatureRegistryUseCase`**: Manages the registration of features and their configurations (`DFFeatureConfig`). It provides methods to register features and retrieve their configurations.
    * **`DFInitializeFeatureUseCase`**: This use case seems to be intended for initializing a feature, potentially involving `SplitCompat.install` and interacting with the `SplitInstallManager`. (The provided code for this use case is minimal).
* **ServiceLoaderWrapper (`DefaultServiceLoaderWrapper`)**: An abstraction over Android's `ServiceLoader` to load implementations of interfaces from dynamic feature modules.

#### 3. State Management Layer

This layer is responsible for managing and persisting the state related to dynamic features.

* **`DFStateStore` (implemented by `DFStateStoreImpl`)**: Manages both persistent and in-memory state.
    * **Persistent State**: Uses Jetpack DataStore to persist the `last_attempted_feature_uri`. This allows the app to remember which feature was being installed if the app closes mid-download, enabling resumption or retry.
    * **In-Memory State**: Uses `MutableStateFlow` to hold the current installation state (`DFInstallationState`) for each observed feature and the state of interceptors (`DFFeatureInterceptorState`). It provides `StateFlow` instances for UI components to observe these states in real-time.
* **State Models**:
    * **`DFInstallationState`**: A sealed class representing the various installation states of a dynamic feature (e.g., `NotInstalled`, `Pending`, `Downloading`, `Installing`, `Installed`, `Failed`, `RequiresConfirmation`). It also includes `DFErrorCode` to map Play Core error codes.
    * **`DFFeatureRoute`**: Represents a parsed route from a URI, containing the path, route name, navigation key, parameters, and parsing status.
    * **`DFFeatureInstallProgress`**: Combines the framework's `DFInstallationState` with Play Core's `SplitInstallSessionState`, especially useful when user confirmation is needed.
    * **`DFFeatureInterceptorState`**: A sealed class representing the states of an interceptor (`Active`, `Inactive`, `Completed`, `Failed`).
    * **`DFFeatureError`**: Encapsulates error information, including the UI error state (`DFComponentState.Error`) and an optional installation state to store.
    * **`DFInstallationMonitoringState`**: Represents events emitted during installation monitoring to signal actions like UI updates, storing pending confirmations, triggering post-install steps, or terminal failures/cancellations.
    * **`DFFeatureSetupResult`**: Represents the outcome of post-installation steps, either `Success` with the feature's screen Composable or `Failure` indicating the step and reason.

#### 4. Registration Layer

This layer handles the configuration and registration of dynamic features.

* **`DFFeatureConfig`**: A data class holding the configuration for a dynamic feature, including its name and a list of `DFFeatureInterceptor` instances.
* **`DFFeatureInterceptor`**: Represents an interceptor task to be executed either before (preInstall = true) or after (preInstall = false) the installation of a feature. The task is a lambda function returning a Boolean for success/failure.
* **`DFRegistryInterfaces` (`DFFeatureRegistrar`, `DFFeatureProvider`)**:
    * `DFFeatureRegistrar`: An interface likely used by modules to register their features with the core framework.
    * `DFFeatureProvider`: An interface that dynamic feature modules can implement to provide their main Composable screen. This is typically discovered using `ServiceLoader`.

#### 5. Dependency Injection (DI) Layer

Dependency injection is managed by Hilt.

* **`AppModule`**: Provides singleton instances of `SplitInstallManager`, Jetpack DataStore (`Preferences`), a global `CoroutineScope`, and `ServiceLoaderWrapper`.
* **`FrameworkBindingsModule`**: Binds interfaces like `DFFeatureInstaller` and `DFStateStore` to their concrete implementations (`DFInstallFeatureUseCase` and `DFStateStoreImpl` respectively).
* ViewModels (e.g., `DFComponentViewModel`) and other classes are annotated with `@HiltViewModel` or `@Inject` for Hilt to manage their dependencies.

### Interactions and Flow

1.  **Initiation**: The process typically starts when `DFComponentActivity` receives an Intent (e.g., from a deep link). It extracts the URI and sends a `ProcessUri` intent to `DFComponentViewModel`.
2.  **URI Processing**: `DFComponentViewModel` uses `DFResolveFeatureRouteUseCase` to parse the URI. If successful, it dispatches a `LoadFeature` intent with the feature name and parameters.
3.  **Feature Loading**:
    * The ViewModel calls `DFLoadFeatureUseCase`.
    * `DFLoadFeatureUseCase` checks with `DFFeatureRegistryUseCase` for feature registration and runs pre-install interceptors via `DFHandleFeatureInterceptorsUseCase`.
    * If the feature is already installed and pre-install interceptors pass, `DFLoadFeatureUseCase` signals to proceed to post-install steps.
    * If not installed and interceptors pass, it signals to proceed with installation monitoring.
    * Errors at this stage (e.g., unregistered feature, failed interceptor) result in an error state.
4.  **Installation (if needed)**:
    * `DFComponentViewModel` initiates installation by calling `DFTrackFeatureInstallUseCase`.
    * `DFTrackFeatureInstallUseCase` internally uses `DFInstallFeatureUseCase` (which implements `DFFeatureInstaller`) to interact with `SplitInstallManager`.
    * `DFInstallFeatureUseCase` requests the module, listens for state updates, and updates `DFStateStore` with `DFInstallationState`.
    * If user confirmation is required (e.g., large download), `DFInstallFeatureUseCase` updates the state. `DFTrackFeatureInstallUseCase` emits a `StorePendingConfirmation` event.
    * `DFComponentViewModel` receives this event, stores `ConfirmationEventData`, and emits an event via `eventFlow` to `DFComponentActivity`.
    * `DFComponentActivity` launches the confirmation dialog. The result is sent back to the ViewModel as a `UserConfirmationResult` intent.
5.  **Post-Installation Steps**:
    * Once `DFTrackFeatureInstallUseCase` signals successful installation (`TriggerPostInstallSteps`), `DFComponentViewModel` calls `DFCompleteFeatureSetupUseCase`.
    * `DFCompleteFeatureSetupUseCase` uses `ServiceLoaderWrapper` to find a `DFFeatureProvider` implementation from the newly installed module. It also runs post-install interceptors via `DFHandleFeatureInterceptorsUseCase`.
    * If successful, it returns the feature's main Composable screen lambda.
6.  **UI Update**:
    * `DFComponentViewModel` updates its `_dynamicScreenContent` StateFlow with the Composable lambda and sets the `_uiState` to `Success`.
    * `DFComponentActivity` observes these changes and renders the dynamic feature's UI.
7.  **Error Handling**: Throughout the process, errors are mapped to `DFComponentState.Error` by `DFTrackFeatureInstallUseCase`'s `handleError` method (which produces a `DFFeatureError`) and propagated to the UI by the ViewModel. The UI can then display appropriate error messages and retry options.

### State Persistence and Recovery

* The `last_attempted_feature_uri` is persisted in DataStore. If the app is closed during an installation, `DFComponentViewModel` can use this on the next launch (e.g., via a `Retry` intent or initial load logic) to check the status with `SplitInstallManager` and potentially resume or restart the installation.
* In-memory states like specific installation progress or interceptor states are transient but can be reconstructed or re-evaluated based on `SplitInstallManager`'s persisted progress and the persisted `last_attempted_feature_uri`.

This architecture provides a modular and state-driven approach to managing dynamic features, enhancing the user experience by reducing initial app size and loading features on demand.